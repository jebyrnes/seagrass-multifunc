#'
#' @details See Byrnes et al. In Review.
#'
#' @author Jarrett Byrnes.
#' @param slopedata A data frame with slopes of the relationship between diversity and number of functions greather than or equal to a threshold
#' from \code{getCoefTab}.
#' @param threshdata A data frame with the number of functions greater than a threshold for each plot at each threshold from \code{getFuncsMaxed}.
#' @param eqn The formula used for fitting the models in slopedata.
#' @param fun The function used to refit the threshold data at key points to get intercepts, etc., that are needed for the table.
#' @param divvar The name of the variable that has the measure of diversity or other driver in the threshdata data frame.
#' @param groupVar The name of a variable by which data is grouped in the threshdata data frame. Typically "thresholds" from \code{getFuncsMaxed}.
#' @param showNfunc Show the functions at Tmin, Tmax, and Tmde. Defaults to TRUE.
#'
#'
#' @export
#' @return A data frame of indices
#'
#' @examples
#' data(all_biodepth)
#' allVars<-qw(biomassY3, root3, N.g.m2,  light3, N.Soil, wood3, cotton3)
#'
#' germany<-subset(all_biodepth, all_biodepth$location=="Germany")
#'
#' vars<-whichVars(germany, allVars)
#'
#' germanyThresh<-getFuncsMaxed(germany, vars, threshmin=0.05, threshmax=0.99, prepend=c("plot","Diversity"), maxN=7)
#'
#' germanyLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=germanyThresh, coefVar="Diversity", family=quasipoisson(link="identity"))
#'
#' getIndices(germanyLinearSlopes, germanyThresh, funcMaxed ~ Diversity)
getIndices <- function(slopedata, threshdata, eqn, fun=glm,
divvar = "Diversity",groupVar="thresholds",
showNfunc=T){
Smax <- max(threshdata[[divvar]], na.rm=T)
Smin <- min(threshdata[[divvar]], na.rm=T)
tdata <-  get_t_indices(slopedata)
predFun <- function(thresh, S){
if(is.na(thresh)) return(NA)
subdata <- threshdata[which(threshdata[[groupVar]]==thresh),]
fit <- getFit(eqn, fun, subdata)
predict(fit, newdata=subdata[which(threshdata[[divvar]]==S),], type="response")[1]
}
Mmin <- predFun(tdata$Tmin, Smax)
Mmax <- predFun(tdata$Tmax, Smax)
Mmde <- predFun(tdata$Tmde, Smax)
Rmde.linear <- slopedata$Estimate[which(slopedata[[groupVar]]==tdata$Tmde)]
Pmde.linear <- slopedata$Estimate[which(slopedata[[groupVar]]==tdata$Tmde)]/(threshdata$nFunc[1]/Smax)
nFunc <- threshdata$nFunc[1]
return(data.frame(Tmin = tdata$Tmin,
Tmax = tdata$Tmax,
Tmde = tdata$Tmde,
Rmde.linear = Rmde.linear,
Pmde.linear = Pmde.linear,
Mmin=Mmin,
Mmax=Mmax,
Mmde = Mmde,
nFunc = nFunc
))
}
getFit <- function(eqn, fun=glm, adf, ...){
aFit<-try(fun(eqn, data=adf, ...))
#if there was a problem, catch it and just return NAs for this coefficient
if("try-error" %in% class(aFit)) return(NA)
if("glm" %in% class(aFit)) {    if(!aFit$converged) return(NA)  }
return(aFit)
}
getIndices_nothresh <- function(eqn, fun=glm, threshdata, divvar = "Diversity", groupVar="thresholds", coefVar, ...){
slopedata = getCoefTab(eqn, fun=glm, threshdata, groupVar="thresholds", coefVar, ...)
getIndices(slopedata, threshdata, eqn, fun, divvar, groupVar)
}
get_t_indices <- function(adf){
minSlope <- adf$Estimate-2*adf[["Std. Error"]]
maxSlope <- adf$Estimate+2*adf[["Std. Error"]]
sloperng <- rbind(minSlope, maxSlope)
#which thresholds have non-zero slopes
not0 <- sort( c( which(colSums(sloperng>0)==2), which(colSums(sloperng>0)==0)))
if(length(not0)!=0){
if(not0[1]-1 ==0){
Tmin <- NA
}else{ Tmin <- adf$thresholds[not0[1]-1]
}
if(range(not0)[2]+1 > length(adf$thresholds)){
Tmax <- NA
}else{
Tmax <- adf$thresholds[range(not0)[2]+1]
}
}else{
Tmin <- NA
Tmax <- NA
}
Tmde <-  adf$thresholds[which( adf$Estimate == max( abs(adf$Estimate), na.rm=T))][1] #the [1] is in case there are multiple identical peaks
return(data.frame(Tmin = Tmin, Tmax = Tmax, Tmde = Tmde))
}
duffyIDX <- getIndices(duffy_2003LinearSlopes, duffy_2003Thresh, funcMaxed ~ diversity, divvar="diversity")
duffyIDX
duffyLines <-
ggplot(data=duffy_2003Thresh, aes(x=diversity, y=funcMaxed, group=percent)) +
ylab(expression("Number of Functions" >= Threshold)) +
xlab("Species Richness") +
stat_smooth(method="glm", family=quasipoisson(link="identity"),  fill=NA, aes(color=percent), lwd=0.3) +
theme_bw(base_size=22) +
scale_color_gradient(name="Percent of \nMaximum", low="blue", high="red")+
xlim(c(0,7))
duffyLines+
annotate(geom="text", x=0, y=c(0.5,1.5,3.7), label=c("    ", "    ", "    ")) +
annotate(geom="text", x=16.85, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("   ", "    ", "    "))
duffyIDX$Mmin
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.25,2,4.7), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.85, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("    ", "    ", "    "), size=7)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8)
duffy_2003Thresh$IDX
duffy_2003Thresh$IDX <- 0
duffy_2003Thresh$IDX [which(duffy_2003Thresh$thresholds %in%
c(duffyIDX$Tmin, duffyIDX$Tmax, duffyIDX$Tmde))] <- 1
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(0.25,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=8)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=2, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=8) +
annotate(geom="text", x=16.85, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("    ", "    ", "    "), size=7)
duffyIDX$Mmin
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=2, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=7, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("    ", "    ", "    "), size=7)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=1, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=7, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("    ", "    ", "    "), size=7)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=7, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=6, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=6.5, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("Mmin", "Mmax", "Mmde"), size=7)
duffySlopes <- ggplot(duffy_2003LinearSlopes, aes(x=thresholds*100)) +
geom_ribbon(fill="grey50", aes(x=thresholds*100, ymin=Estimate-1.96*duffy_2003LinearSlopes[["Std. Error"]],
ymax=Estimate+1.96*duffy_2003LinearSlopes[["Std. Error"]])) +
geom_point(aes(x=thresholds*100, y=Estimate)) +
ylab("Change in Number of Function\n per Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
stat_abline(intercept=0, slope=0, lwd=1, linetype=2) +
theme_bw(base_size=22)
duffySlopes +
annotate(geom="text", y=c(-0.02, -0.02, -0.02, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
duffySlopes +
annotate(geom="text", y=c(-0.04, -0.04, -0.04, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
data(all_biodepth)
#Read in data  to run sample analyses on the biodepth data
allVars<-qw(biomassY3, root3, N.g.m2,  light3, N.Soil, wood3, cotton3)
varIdx<-which(names(all_biodepth) %in% allVars)
#re-normalize so that everything is on the same sign-scale (e.g. the maximum level of a function is the "best" function)
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
#get thresholds
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
####look at slopes
#note, maxIT argument is due to some fits needing more iterations to converge
bdLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=bdThreshes, groupVar=c("location", "thresholds"),
coefVar="Diversity", family=quasipoisson(link="identity"), control=list(maxit=800))
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
indexTable$Mmin[which(is.na(indexTable$Mmin))]<-indexTable$nFunc[which(is.na(indexTable$Mmin))]
indexTable$Tmin[which(is.na(indexTable$Tmin))]<-0
indexTable$Mmin <- round(indexTable$Mmin)
indexTable$Tmde=indexTable$Tmde*100
indexTable$Tmax=indexTable$Tmax*100
indexTable$Tmin=indexTable$Tmin*100
#figure
names(bdLinearSlopes) <- c("location", "thresholds", "Estimate", "StdError", "tvalue", "p")
bdLinearSlopes$thresholds <- bdLinearSlopes$thresholds*100
bdLinearSlopes <- bdLinearSlopes[-which(is.na(bdLinearSlopes$Estimate)),]
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(mapping= aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*StdError), fill="grey50") +
geom_point(size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+4, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=24) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
colci <- function(atab){
ldply(apply(atab,2,function(x) mean_cl_boot(x)))
}
indexTable2 <- indexTable[,-10]
indexTable2$Mmin <- indexTable$Mmin/indexTable$nFunc*100
indexTable2$Mmax <- indexTable$Mmax/indexTable$nFunc*100
indexTable2$Mmde <- indexTable$Mmde/indexTable$nFunc*100
indexTable2$Pmde.linear <- indexTable$Pmde.linear*100
indexTable2 <- data.frame(Mean=colMeans(indexTable2[,-1]),
lower.CI = colci(indexTable2[,-1])[,3],
upper.CI = colci(indexTable2[,-1])[,4])
indexTable2$metric <- rownames(indexTable2)
indexSummary <- indexTable2[c(3:2,8:7),]
indexSummary$metric <- factor(indexSummary$metric, levels=indexSummary$metric)
indexSummary$Type="Max Threshold"
indexSummary$Type[grep("mde", indexSummary$metric)] <- "Strongest Diversity Effect"
ggplot(indexSummary, aes(x=metric, y=Mean, ymin=lower.CI, ymax=upper.CI)) +
geom_point(size=4)+
geom_linerange(size=1) +
theme_bw(base_size=24) +
xlab("") +
ylab("Percentage\n") +
stat_hline(yintercept=0, lwd=2, lty=2) +
facet_wrap(~Type, scale="free_x") +
ylim(c(0,100))
duffy_2003LinearSlopes<-getCoefTab(funcMaxed ~ diversity, data=duffy_2003Thresh, coefVar="diversity", family=quasipoisson(link="identity"))
duffy_2003Thresh$percent <- 100*duffy_2003Thresh$thresholds
duffyIDX <- getIndices(duffy_2003LinearSlopes, duffy_2003Thresh, funcMaxed ~ diversity, divvar="diversity")
duffy_2003Thresh$IDX <- 0
duffy_2003Thresh$IDX [which(duffy_2003Thresh$thresholds %in%
c(duffyIDX$Tmin, duffyIDX$Tmax, duffyIDX$Tmde))] <- 1
duffyLines <-
ggplot(data=duffy_2003Thresh, aes(x=diversity, y=funcMaxed, group=percent)) +
ylab(expression("Number of Functions" >= Threshold)) +
xlab("Species Richness") +
stat_smooth(method="glm", family=quasipoisson(link="identity"),  fill=NA, aes(color=percent), lwd=0.3) +
theme_bw(base_size=22) +
scale_color_gradient(name="Percent of \nMaximum", low="blue", high="red")+
xlim(c(0,7))
duffyLines+
annotate(geom="text", x=0.5, y=c(0.5,1.5,3.7), label=c("    ", "    ", "    ")) +
annotate(geom="text", x=6.5, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("   ", "    ", "    "))
duffyLines +
geom_smooth(method="glm", family=quasipoisson(link="identity"),
fill=NA, aes(color=percent), data=duffy_2003Thresh[which(duffy_2003Thresh$IDX>0),], lwd=8) +
annotate(geom="text", x=0.5, y=c(1,2,4.2), label=c("Tmax", "Tmde", "Tmin"), size=7) +
annotate(geom="text", x=6.5, y=c(duffyIDX$Mmin, duffyIDX$Mmax, duffyIDX$Mmde), label=c("    ", "    ", "    "), size=7)
```
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
duffySlopes <- ggplot(duffy_2003LinearSlopes, aes(x=thresholds*100)) +
geom_ribbon(fill="grey50", aes(x=thresholds*100, ymin=Estimate-1.96*duffy_2003LinearSlopes[["Std. Error"]],
ymax=Estimate+1.96*duffy_2003LinearSlopes[["Std. Error"]])) +
geom_point(aes(x=thresholds*100, y=Estimate)) +
ylab("Change in Number of Function\n per Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
stat_abline(intercept=0, slope=0, lwd=1, linetype=2) +
theme_bw(base_size=22)
duffySlopes +
annotate(geom="text", y=c(-0.04, -0.04, -0.04, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+4, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=24) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
duffySlopes <- ggplot(duffy_2003LinearSlopes, aes(x=thresholds*100)) +
geom_ribbon(fill="grey50", aes(x=thresholds*100, ymin=Estimate-1.96*duffy_2003LinearSlopes[["Std. Error"]], ymax=Estimate+1.96*duffy_2003LinearSlopes[["Std. Error"]])) +
geom_point(aes(x=thresholds*100, y=Estimate)) +
ylab("Change in Number of Function\n per Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
stat_abline(intercept=0, slope=0, lwd=1, linetype=2) +
theme_bw(base_size=22)
# annotate(geom="text", y=c(-0.04, -0.04, -0.04, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+4, label=location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=24) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
library(slidify)
?slidify
slidify()
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
location
indexTable$location
indexTable
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
library(slidify)
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
source('~/.active-rstudio-document', echo=TRUE)
duffyLines
duffySlopes +
annotate(geom="text", y=c(-0.04, -0.04, -0.04, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
indexTable
indexTable <- ldply(indexTable)
indexTable
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable
levels(bdLinearSlopes$location)
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
data(all_biodepth)
#Read in data  to run sample analyses on the biodepth data
allVars<-qw(biomassY3, root3, N.g.m2,  light3, N.Soil, wood3, cotton3)
varIdx<-which(names(all_biodepth) %in% allVars)
#re-normalize so that everything is on the same sign-scale (e.g. the maximum level of a function is the "best" function)
sub_biodepth<-ddply(all_biodepth, .(location), function(adf){
adf$light3<- -1*adf$light3+max(adf$light3, na.rm=T)
adf$N.Soil<- -1*adf$N.Soil +max(adf$N.Soil, na.rm=T)
adf
})
#get thresholds
bdThreshes<-ddply(sub_biodepth, .(location), function(x) getFuncsMaxed(x, vars=allVars, prepend=c("plot","Diversity"), maxN=8))
####look at slopes
#note, maxIT argument is due to some fits needing more iterations to converge
bdLinearSlopes<-getCoefTab(funcMaxed ~ Diversity, data=bdThreshes, groupVar=c("location", "thresholds"),
coefVar="Diversity", family=quasipoisson(link="identity"), control=list(maxit=800))
indexTable <- lapply(levels(bdLinearSlopes$location), function(x){
slopedata <- subset(bdLinearSlopes, bdLinearSlopes$location==x)
threshdata <- subset(bdThreshes, bdThreshes$location==x)
ret <- getIndices(slopedata, threshdata, funcMaxed ~ Diversity)
ret<-cbind(location=x, ret)
ret
})
indexTable <- ldply(indexTable)
indexTable$Mmin[which(is.na(indexTable$Mmin))]<-indexTable$nFunc[which(is.na(indexTable$Mmin))]
indexTable$Tmin[which(is.na(indexTable$Tmin))]<-0
indexTable$Mmin <- round(indexTable$Mmin)
indexTable$Tmde=indexTable$Tmde*100
indexTable$Tmax=indexTable$Tmax*100
indexTable$Tmin=indexTable$Tmin*100
indexTable
#figure
names(bdLinearSlopes) <- c("location", "thresholds", "Estimate", "StdError", "tvalue", "p")
bdLinearSlopes$thresholds <- bdLinearSlopes$thresholds*100
bdLinearSlopes <- bdLinearSlopes[-which(is.na(bdLinearSlopes$Estimate)),]
ggplot(data=bdLinearSlopes, aes(x=thresholds, y=Estimate)) +
geom_ribbon(mapping= aes(x=thresholds,
ymin=Estimate-1.96*StdError,
ymax=Estimate+1.96*StdError), fill="grey50") +
geom_point(size=2.2) +
ylab("Change in Number of Functions \nper Addition of 1 Species\n") +
xlab("\nThreshold (%)") +
facet_wrap(~location)+#, scale="free") +
stat_abline(intercept=0, slope=0, lwd=0.6, linetype=2) +
theme_bw(base_size=22)
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde) +
geom_text(data=indexTable, aes(x=Tmax-2, y=100*Mmax/nFunc+4, label=indexTable$location), size=I(5)) +
# scale_color_discrete(guide=FALSE) +
theme_bw(base_size=24) +
xlab("\nHighest Threshold with a Diversity Effect") +
ylab("Percentage of Functions Maximized\n") +
scale_size_continuous("Slope of Strongest Observed\nDiversity Effect") +
xlim(c(40,100)) +
ylim(c(0,110))
qplot(Tmax, Mmax/nFunc*100, size=Rmde.linear,
data=indexTable, geom="point", color=Tmde)
indexTable
library(multifunc)
data(duffy_2003)
library(slidify)
slidify("./index.Rmd", "./index.html")
library(multifunc)
source('~/.active-rstudio-document', echo=TRUE)
duffySlopes +
annotate(geom="text", y=c(-0.04, -0.04, -0.04, duffyIDX$Rmde.linear+0.05), x=c(duffyIDX$Tmin*100, duffyIDX$Tmde*100, duffyIDX$Tmax*100, duffyIDX$Tmde*100),  label=c("Tmin", "Tmde", "Tmax", "Rmde"), color="black", size=8)
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
#make an aggregated daat set for plotting
duffy_2003ForPlotting2<-melt(duffy_2003[,c(5,spIDX, varIdx)], id.vars=c("diversity", species))
levels(duffy_2003ForPlotting2$variable) <- c('Sediment organic C', 'Eelgrass Biomass Change', 'Reflected Algal Mass', 'Grazer Biomass', 'Botryllus Biomass', 'Reflected Benthic Diversity')
duffy_2003ForPlottingSum <- ddply(duffy_2003ForPlotting2,
c("variable", "diversity", species),
summarize, mean_value=mean(value), se_value =sd(value)/sqrt(length(value)) )
duffy_2003ForPlottingSum$se_value[which(is.na(duffy_2003ForPlottingSum$se_value))] <- 0
?ddply
duffy_2003ForPlotting2
head(duffy_2003ForPlotting2)
species
spIDX
varIdx
head(duffy_2003[,c(5,spIDX, varIdx)])
duffy_2003
names(duffy_2003[,c(5,spIDX, varIdx)])
data(duffy_2003)
names(duffy_2003)
duffy_2003[,spIDX]
duffy_2003[,varIDX]
duffy_2003[,varIdx]
varIdx<-which(names(duffy_2003) %in% vars)
varIdx
duffy_2003[,varIdx]
library(multifunc)
#for plotting
library(ggplot2)
library(gridExtra)
#Read in data  to run sample analyses on the duffy 2003 data
data(duffy_2003)
#load("./duffy_2003.rda")
duffy_2003 <- subset(duffy_2003, duffy_2003$diversity !=0)
vars<-qw(grazer_mass, tot_algae_mass, Zost_change_mass, botryllus_biomass, taxon_richness, sediment_C)
varIdx<-which(names(duffy_2003) %in% vars)
#######
#Get the relevant variables we'll be working with
#######
species<-relevantSp(duffy_2003,20:ncol(duffy_2003))
spIDX <- which(names(duffy_2003) %in% species) #in case we need these
#Reflect the relevant variables
duffy_2003$taxon_richness <- -1*duffy_2003$taxon_richness + max(duffy_2003$taxon_richness)
duffy_2003$tot_algae_mass <- -1*duffy_2003$tot_algae_mass + max(duffy_2003$tot_algae_mass)
#make an aggregated daat set for plotting
duffy_2003ForPlotting2<-melt(duffy_2003[,c(5,spIDX, varIdx)], id.vars=c("diversity", species))
levels(duffy_2003ForPlotting2$variable) <- c('Sediment organic C', 'Eelgrass Biomass Change', 'Reflected Algal Mass', 'Grazer Biomass', 'Botryllus Biomass', 'Reflected Benthic Diversity')
duffy_2003ForPlotting2
duffy_2003ForPlottingSum <- ddply(duffy_2003ForPlotting2,
c("variable", "diversity", species),
summarize, mean_value=mean(value), se_value =sd(value)/sqrt(length(value)) )
duffy_2003ForPlottingSum$se_value[which(is.na(duffy_2003ForPlottingSum$se_value))] <- 0
duffy_2003ForPlottingSum <- ddply(duffy_2003ForPlotting2,
c("variable", "diversity", species),
summarize, mean_value=mean(value), se_value =sd(value)/sqrt(length(value)) )
names(duffy_2003ForPlotting2)
duffy_2003ForPlottingSum <- ddply(duffy_2003ForPlotting2,
c("variable", "diversity", species),
summarise, mean_value=mean(value),
se_value =sd(value)/sqrt(length(value)) )
duffy_2003ForPlottingSum$se_value[which(is.na(duffy_2003ForPlottingSum$se_value))] <- 0
#plot each function
par(mfrow=c(2,3), mar=c(4.5, 5, 3, 2) + 0.1)
for(avar in levels(duffy_2003ForPlottingSum$variable)){
plotMe <- duffy_2003ForPlottingSum[which(duffy_2003ForPlottingSum$variable==avar),]
yminmax <- c(min(plotMe$mean_value-plotMe$se_value)-0.03, max(plotMe$mean_value+plotMe$se_value)+0.03)
pieDivPlot(diversity, mean_value, 3:8, se_value,
data = plotMe, ylim=yminmax,
cex.axis = 1.8, cex.lab = 1.8, radius = 0.1, jitterAmount = 0.3, ylab=avar, xlab="Grazer Species Richness")
abline(lm(value ~ diversity, data=subset(duffy_2003ForPlotting2, duffy_2003ForPlotting2$variable==avar)), col="red", lty=2, lwd=2)
}
par(mfrow=c(1,1))
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
?par
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
slidify("./index.Rmd", "./index.html")
